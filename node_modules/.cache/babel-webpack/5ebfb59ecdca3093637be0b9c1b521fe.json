{"ast":null,"code":"import _asyncToGenerator from \"/Users/jft/jftprojects/cocoanalyticssdk-js-energy-sample-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction BarChartComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵelementStart(2, \"span\", 7);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class BarChartComponent {\n  constructor() {\n    this.showChart = false; // public barChartOptions: ChartOptions = {\n    //   responsive: true,\n    // };\n    // Chart.pluginService.register({\n    //   beforeDraw: function (chart, easing) {\n    //     if (chart.config.options.chartArea && chart.config.options.chartArea.backgroundColor) {\n    //       var helpers = Chart.helpers;\n    //       var ctx = chart.chart.ctx;\n    //       var chartArea = chart.chartArea;\n    //       ctx.save();\n    //       ctx.fillStyle = chart.config.options.chartArea.backgroundColor;\n    //       ctx.fillRect(chartArea.left, chartArea.top, chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    //       ctx.restore();\n    //     }\n    //   }\n    // });\n\n    this.barChartOptions = {\n      responsive: true,\n      //  ...this.barChartOptions,\n      options: {\n        chartArea: {\n          backgroundColor: 'rgba(251, 85, 85, 0.4)'\n        }\n      },\n      scales: {\n        xAxes: [{\n          stacked: true,\n          ticks: {\n            maxTicksLimit: 0,\n            maxRotation: 0\n          },\n          gridLines: {\n            display: false,\n            color: \"#FFFFFF\"\n          },\n          barThickness: 8 // number (pixels) or 'flex'\n\n        }],\n        yAxes: [{\n          stacked: true,\n          ticks: {\n            // callback: function (label, index) {\n            //   // Hide the label of every 2nd dataset\n            //   // return index % 2 === 0 ? this.getLabelForValue(label) : '';\n            //   // return index % 2 === 0 ? label.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : '';\n            //   // return index % 2 === 0 ? 'aaa' : 'bbb';\n            // },\n            callback: function (label, index, labels) {\n              // return label.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + \" kWh\";\n              return label.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + \"\";\n            }\n          }\n        }]\n      },\n      legend: {\n        display: false\n      }\n    };\n    this.barChartLabels = [];\n    this.barChartLegend = true;\n    this.barChartPlugins = [];\n    this.barChartColors = [];\n    this.alertThreshold = 3500;\n    this.barChartData = [{\n      data: [],\n      label: ''\n    }];\n  }\n\n  ngOnChanges() {\n    this.barChartType = this.graphType;\n    this.barChartLabels = [];\n    this.barChartColors = [];\n    console.log(\"in chart \");\n    console.log(this.dataset);\n\n    if (this.dataset && this.dataset.data) {\n      if (this.graphType == \"bar\") {\n        this.setBarChartColors();\n      } else {\n        this.setBarChartColors2();\n      } // this.barChartData[0].label=this.selectedResource.name;\n\n\n      for (var i = 0; i < this.dataset.data.length; i++) {\n        this.barChartData[0].data.push(this.dataset.data[i].value);\n\n        if (this.timeResolution == \"Hourly\") {\n          this.getTimes(this.dataset.data[i].time, i);\n        } else if (this.timeResolution == \"Daily\") {\n          this.getDays(this.dataset.data[i].time, i);\n        } else if (this.timeResolution == \"Monthly\") {\n          this.getMonths(this.dataset.data[i].time, i);\n        }\n      }\n\n      this.showChart = true;\n    }\n  }\n\n  configureCharts() {}\n\n  getTimes(dateTime, i) {\n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    var d = this.convertUTCDateToLocalDate(dateTime);\n    var hours = parseInt(d.getHours().toString()) < 10 ? \"0\" + d.getHours().toString() : d.getHours().toString();\n    var mins = parseInt(d.getMinutes().toString()) < 10 ? \"0\" + d.getMinutes().toString() : d.getMinutes().toString();\n    var time = hours + \":\" + mins;\n    this.convertMilitaryTimeToStandardTime(time).then(res => {\n      if (i % 2 === 0) {\n        this.barChartLabels.push([res, d.getDate() + '-' + months[d.getMonth()] + '-' + d.getFullYear().toString()]);\n      } else {\n        this.barChartLabels.push(\"\");\n      }\n    });\n  }\n\n  getDays(dateTime, i) {\n    var d = this.convertUTCDateToLocalDate(dateTime);\n    var weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n    if (i % 2 === 0) {\n      this.barChartLabels.push(months[d.getMonth()] + ' ' + d.getDate().toString());\n    } else {\n      this.barChartLabels.push(\"\");\n    }\n  }\n\n  getMonths(dateTime, i) {\n    var d = this.convertUTCDateToLocalDate(dateTime);\n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n    if (i % 2 === 0) {\n      this.barChartLabels.push([months[d.getMonth()], d.getFullYear().toString()]);\n    } else {\n      this.barChartLabels.push(\"\");\n    }\n  }\n\n  setBarChartColors() {\n    this.barChartColors = [];\n    var color = []; // for(var i=0; i< this.dataset.data.length; i++){\n\n    for (var j = 0; j < this.dataset.data.length; j++) {\n      if (parseInt(this.dataset.data[j]) > this.alertThreshold) {\n        color.push('#E27373');\n      } else {\n        color.push('#66a19c');\n      }\n    } // }\n\n\n    this.barChartColors.push({\n      backgroundColor: color\n    });\n  }\n\n  setBarChartColors2() {\n    this.barChartColors = [{\n      // backgroundColor: '#fff',\n      borderColor: '#66A19C',\n      pointBackgroundColor: '#fff',\n      pointBorderColor: '#66A19C',\n      pointHoverBackgroundColor: '#fff',\n      color: '#fff' // pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n\n    }];\n  }\n\n  convertUTCDateToLocalDate(date) {\n    var d = new Date(date);\n    var time = d.getTime();\n    var offset = d.getTimezoneOffset() * 60 * 1000;\n    var nd = time - offset;\n    var newDate = new Date(nd);\n    return newDate;\n  }\n\n  convertMilitaryTimeToStandardTime(time) {\n    return _asyncToGenerator(function* () {\n      var splitTime = time.split(':');\n      var _hrs = splitTime[0];\n      var _mins = splitTime[1];\n\n      if (parseInt(_hrs) > 12) {\n        _hrs = (parseInt(_hrs) - 12).toString();\n\n        if (parseInt(_hrs) < 10) {// _hrs=(\"0\"+_hrs).toString();\n        }\n\n        return _hrs + \":\" + _mins + \" pm\";\n      } else if (parseInt(_hrs) < 12 && parseInt(_hrs) != 0) {\n        if (parseInt(_hrs) < 10) {// _hrs=(\"0\"+_hrs).toString();\n        }\n\n        return _hrs + \":\" + _mins + \" am\";\n      } else if (parseInt(_hrs) == 12) {\n        return \"12:00 pm\";\n      } else if (parseInt(_hrs) == 0) {\n        return \"12:00 am\";\n      }\n    })();\n  }\n\n}\n\nBarChartComponent.ɵfac = function BarChartComponent_Factory(t) {\n  return new (t || BarChartComponent)();\n};\n\nBarChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BarChartComponent,\n  selectors: [[\"app-bar-chart\"]],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 6,\n  vars: 7,\n  consts: [[\"fxFlex\", \"\", 1, \"bg-white\", 2, \"height\", \"100%\", \"padding\", \"20px\"], [1, \"title\"], [\"id\", \"graph\"], [\"class\", \"d-flex justify-content-center text-dark\", 4, \"ngIf\"], [\"baseChart\", \"\", 1, \"graph\", 3, \"datasets\", \"labels\", \"options\", \"chartType\", \"colors\"], [1, \"d-flex\", \"justify-content-center\", \"text-dark\"], [\"role\", \"status\", 1, \"spinner-border\"], [1, \"sr-only\"]],\n  template: function BarChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"label\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, BarChartComponent_div_4_Template, 4, 0, \"div\", 3);\n      i0.ɵɵelement(5, \"canvas\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.ready === false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"datasets\", ctx.barChartData)(\"labels\", ctx.barChartLabels)(\"options\", ctx.barChartOptions)(\"chartType\", ctx.barChartType)(\"colors\", ctx.barChartColors);\n    }\n  },\n  directives: [i1.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJiYXItY2hhcnQuY29tcG9uZW50LnNjc3MifQ== */\"]\n});\n\n__decorate([Input()], BarChartComponent.prototype, \"timeResolution\", void 0);\n\n__decorate([Input()], BarChartComponent.prototype, \"dataset\", void 0);\n\n__decorate([Input()], BarChartComponent.prototype, \"graphType\", void 0);","map":{"version":3,"sources":["/Users/jft/jftprojects/cocoanalyticssdk-js-energy-sample-app/src/app/components/bar-chart/bar-chart.component.ts","/Users/jft/jftprojects/cocoanalyticssdk-js-energy-sample-app/src/app/components/bar-chart/bar-chart.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bar-chart',\n  templateUrl: './bar-chart.component.html',\n  styleUrls: ['./bar-chart.component.scss']\n})\nexport class BarChartComponent implements OnInit {\n  @Input() timeResolution;\n  @Input() dataset;\n  @Input() graphType;\n\n  showChart: boolean = false;\n\n  // public barChartOptions: ChartOptions = {\n  //   responsive: true,\n  // };\n\n  // Chart.pluginService.register({\n  //   beforeDraw: function (chart, easing) {\n  //     if (chart.config.options.chartArea && chart.config.options.chartArea.backgroundColor) {\n  //       var helpers = Chart.helpers;\n  //       var ctx = chart.chart.ctx;\n  //       var chartArea = chart.chartArea;\n\n  //       ctx.save();\n  //       ctx.fillStyle = chart.config.options.chartArea.backgroundColor;\n  //       ctx.fillRect(chartArea.left, chartArea.top, chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n  //       ctx.restore();\n  //     }\n  //   }\n  // });\n\n  public barChartOptions: any = {\n    responsive: true,\n    //  ...this.barChartOptions,\n    options: {\n      chartArea: {\n        backgroundColor: 'rgba(251, 85, 85, 0.4)'\n      }\n    },\n    scales: {\n      xAxes: [\n        {\n          stacked: true,\n          ticks: {\n            maxTicksLimit: 0,\n            maxRotation: 0,\n\n          },\n          gridLines: { display: false, color: \"#FFFFFF\" },\n          barThickness: 8,  // number (pixels) or 'flex'\n        },\n\n      ],\n      yAxes: [{\n        stacked: true,\n        ticks: {\n          // callback: function (label, index) {\n          //   // Hide the label of every 2nd dataset\n          //   // return index % 2 === 0 ? this.getLabelForValue(label) : '';\n          //   // return index % 2 === 0 ? label.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : '';\n\n          //   // return index % 2 === 0 ? 'aaa' : 'bbb';\n          // },\n\n          callback: function (label, index, labels) {\n            // return label.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + \" kWh\";\n            return label.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + \"\";\n          }\n        },\n      }]\n    },\n    legend: {\n      display: false\n    }\n  };\n\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType;\n  public barChartLegend = true;\n  public barChartPlugins = [];\n  public barChartColors = [];\n  alertThreshold = 3500;\n\n  public barChartData: ChartDataSets[] = [\n    { data: [], label: '' },\n  ];\n\n  constructor() { }\n\n  ngOnChanges(): void {\n    this.barChartType = this.graphType;\n    this.barChartLabels = [];\n    this.barChartColors = [];\n\n    console.log(\"in chart \");\n    console.log(this.dataset);\n    if (this.dataset && this.dataset.data) {\n\n      if (this.graphType == \"bar\") {\n        this.setBarChartColors();\n      }\n      else {\n        this.setBarChartColors2();\n      }\n\n\n      // this.barChartData[0].label=this.selectedResource.name;\n      for (var i = 0; i < this.dataset.data.length; i++) {\n\n        this.barChartData[0].data.push(\n          this.dataset.data[i].value\n        );\n\n        if (this.timeResolution == \"Hourly\") {\n          this.getTimes(this.dataset.data[i].time, i);\n        }\n\n        else if (this.timeResolution == \"Daily\") {\n          this.getDays(this.dataset.data[i].time, i);\n        }\n        else if (this.timeResolution == \"Monthly\") {\n          this.getMonths(this.dataset.data[i].time, i);\n        }\n      }\n      this.showChart = true;\n    }\n  }\n\n  configureCharts() {\n\n\n  }\n\n\n  getTimes(dateTime, i) {\n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    var d = this.convertUTCDateToLocalDate(dateTime);\n    var hours = parseInt(d.getHours().toString()) < 10 ? \"0\" + d.getHours().toString() : d.getHours().toString();\n    var mins = parseInt(d.getMinutes().toString()) < 10 ? \"0\" + d.getMinutes().toString() : d.getMinutes().toString();\n    var time = (hours + \":\" + mins);\n\n\n    this.convertMilitaryTimeToStandardTime(time).then(res => {\n      if (i % 2 === 0) {\n        this.barChartLabels.push([res, d.getDate() + '-' + months[d.getMonth()] + '-' + d.getFullYear().toString()]);\n      }\n      else {\n        this.barChartLabels.push(\"\");\n      }\n    });\n  }\n\n  getDays(dateTime, i) {\n    var d = this.convertUTCDateToLocalDate(dateTime);\n    var weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    if (i % 2 === 0) {\n      this.barChartLabels.push(months[d.getMonth()] + ' ' + d.getDate().toString());\n    }\n    else {\n      this.barChartLabels.push(\"\");\n    }\n  }\n\n  getMonths(dateTime, i) {\n    var d = this.convertUTCDateToLocalDate(dateTime);\n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    if (i % 2 === 0) {\n      this.barChartLabels.push([months[d.getMonth()], d.getFullYear().toString()]);\n    }\n    else {\n      this.barChartLabels.push(\"\");\n    }\n  }\n\n  setBarChartColors() {\n    this.barChartColors = [];\n    var color = [];\n    // for(var i=0; i< this.dataset.data.length; i++){\n    for (var j = 0; j < this.dataset.data.length; j++) {\n      if (parseInt(this.dataset.data[j]) > this.alertThreshold) {\n        color.push('#E27373');\n      }\n      else {\n        color.push('#66a19c');\n      }\n    }\n    // }\n    this.barChartColors.push({ backgroundColor: color })\n  }\n\n  setBarChartColors2() {\n    this.barChartColors = [\n      {//green\n        // backgroundColor: '#fff',\n        borderColor: '#66A19C',\n        pointBackgroundColor: '#fff',\n        pointBorderColor: '#66A19C',\n        pointHoverBackgroundColor: '#fff',\n        color: '#fff'\n        // pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n      }\n    ];\n\n  }\n\n  convertUTCDateToLocalDate(date) {\n    var d = new Date(date);\n    var time = d.getTime();\n    var offset = d.getTimezoneOffset() * 60 * 1000;\n    var nd = time - offset;\n    var newDate = new Date(nd);\n    return newDate;\n  }\n\n  async convertMilitaryTimeToStandardTime(time) {\n    var splitTime = time.split(':');\n    var _hrs = splitTime[0];\n    var _mins = splitTime[1];\n\n    if (parseInt(_hrs) > 12) {\n      _hrs = (parseInt(_hrs) - 12).toString();\n      if (parseInt(_hrs) < 10) {\n        // _hrs=(\"0\"+_hrs).toString();\n      }\n      return _hrs + \":\" + _mins + \" pm\";\n    }\n    else if (parseInt(_hrs) < 12 && parseInt(_hrs) != 0) {\n      if (parseInt(_hrs) < 10) {\n        // _hrs=(\"0\"+_hrs).toString();\n      }\n      return _hrs + \":\" + _mins + \" am\";\n    }\n    else if (parseInt(_hrs) == 12) {\n      return \"12:00 pm\";\n    }\n    else if (parseInt(_hrs) == 0) {\n      return \"12:00 am\";\n    }\n  }\n\n}\n","<div fxFlex style=\"height: 100%;padding:20px\" class=\"bg-white\">\n  <label class=\"title\">{{ title }}</label>\n  <div id=\"graph\">\n    <div *ngIf=\"ready === false\" class=\"d-flex justify-content-center text-dark\">\n      <div class=\"spinner-border\" role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n    <!-- <canvas *ngIf=\"ready && showChart\" style=\"height:265px\" baseChart [datasets]=\"chartData\" [labels]=\"chartLabels\"\n      [options]=\"chartOptions\" [colors]=\"barChartColors\" chartType=\"bar\">\n    </canvas> -->\n    <canvas class=\"graph\" baseChart [datasets]=\"barChartData\" [labels]=\"barChartLabels\" [options]=\"barChartOptions\"\n      [chartType]=\"barChartType\" [colors]=\"barChartColors\">\n    </canvas>\n  </div>\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}